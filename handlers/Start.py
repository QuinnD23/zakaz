from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.dispatcher.filters import Command

# config
from data.config import code

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import StartMenu, ChoiceAutoMenu, AdminMenu, MyOrdersMenu


@dp.message_handler(Command("start"))
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    admin_name = str(await select_db("admin", "code", "admin_name", code))

    if user_name == admin_name:
        await update_db("admin", "code", "admin_id", code, user_id)

        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    else:
        users_count = int(await select_db("admin", "code", "users_count", code))
        users_count += 1
        await update_db("admin", "code", "users_count", code, users_count)

        try:
            await insert_db("users", "user_id", user_id)
        except:
            pass
        await update_db("users", "user_id", "user_name", user_id, user_name)
        await update_db("users", "user_id", "autos_count", user_id, 1)
        await update_db("users", "user_id", "orders_count", user_id, 1)
        await update_db("users", "user_id", "places_count", user_id, 1)

        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()


@dp.message_handler(state=StateMachine.StartName)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        name = message.text
        await update_db("users", "user_id", "name", user_id, name)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        await StateMachine.StartNumber.set()


@dp.message_handler(state=StateMachine.StartNumber)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        number = message.text
        await update_db("users", "user_id", "number", user_id, number)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ú–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ:")
        await StateMachine.StartAuto.set()


@dp.message_handler(state=StateMachine.StartAuto)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        id = str(await select_db("users", "user_id", "autos_count", user_id)) + "$" + user_id
        auto = message.text
        try:
            await insert_db("autos", "id", id)
        except:
            pass
        await update_db("autos", "id", "auto", id, auto)

        # await message.answer("–í–≤–µ–¥–∏—Ç–µ VIN –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        # await StateMachine.StartVin.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ì–æ–¥ –í—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await StateMachine.StartYear.set()


@dp.message_handler(state=StateMachine.StartYear)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        id = str(await select_db("users", "user_id", "autos_count", user_id)) + "$" + user_id
        year = message.text
        await update_db("autos", "id", "year", id, year)

        autos_count = int(await select_db("users", "user_id", "autos_count", user_id)) + 1
        await update_db("users", "user_id", "autos_count", user_id, autos_count)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –†–∞–π–æ–Ω:")
        await StateMachine.StartPlace.set()


@dp.message_handler(state=StateMachine.StartVin)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        id = str(await select_db("users", "user_id", "autos_count", user_id)) + "$" + user_id
        vin = message.text
        await update_db("autos", "id", "vin", id, vin)

        autos_count = int(await select_db("users", "user_id", "autos_count", user_id)) + 1
        await update_db("users", "user_id", "autos_count", user_id, autos_count)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –†–∞–π–æ–Ω:")
        await StateMachine.StartPlace.set()


@dp.message_handler(state=StateMachine.StartPlace)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
        await StateMachine.StartName.set()
    # -----
    else:
        id = str(await select_db("users", "user_id", "places_count", user_id)) + "$" + user_id
        place = message.text
        try:
            await insert_db("places", "id", id)
        except:
            pass
        await update_db("places", "id", "place", id, place)

        places_count = int(await select_db("users", "user_id", "places_count", user_id)) + 1
        await update_db("users", "user_id", "places_count", user_id, places_count)

        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ‚úÖ", reply_markup=StartMenu)
        await StateMachine.Start.set()


@dp.message_handler(state=StateMachine.Start)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # ----- start
    if message.text == "/start":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}")
        await message.answer("üõ†–ö–æ–º–ø–∞–Ω–∏—è RST\n"
                             "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ–º–æ–Ω—Ç –∏ –∑–∞–º–µ–Ω—É –ª–æ–±–æ–≤—ã—Ö —Å—Ç–µ–∫–æ–ª –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
                             "‚ö°Ô∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π", reply_markup=StartMenu)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:")
    # -----

    if message.text == "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑üõ†":
        id = str(await select_db("users", "user_id", "orders_count", user_id)) + "$" + user_id
        try:
            await insert_db("orders", "id", id)
        except:
            pass

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=ReplyKeyboardRemove())

        counter = 1
        autos_count = int(await select_db("users", "user_id", "autos_count", user_id))
        while counter < autos_count:
            id = str(counter) + "$" + user_id
            auto = await select_db("autos", "id", "auto", id)
            year = await select_db("autos", "id", "year", id)
            await message.answer(f"–ù–æ–º–µ—Ä {counter}\n"
                                 f"üöô –ê–≤—Ç–æ - {auto}\n"
                                 f"üìô –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ - {year}")
            counter += 1

        await message.answer("‚ö°Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π", reply_markup=ChoiceAutoMenu)
        await StateMachine.AutoChoice.set()

    if message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìö":
        orders_count = await select_db("users", "user_id", "orders_count", user_id)
        counter = 1
        delete_id = 1
        while counter < orders_count:
            id = str(counter) + '$' + user_id
            try:
                status = int(await select_db("orders", "id", "status", id))
            except:
                counter += 1
                continue
            if status == 0:
                auto = str(await select_db("orders", "id", "auto", id))
                year = str(await select_db("orders", "id", "year", id))
                dime_tre = str(await select_db("orders", "id", "dime_tre", id))
                srok_tre = str(await select_db("orders", "id", "srok_tre", id))
                place = str(await select_db("orders", "id", "place", id))
                await message.answer(f"{delete_id}üí•–ó–∞–∫–∞–∑"
                                     f"üöô –ê–≤—Ç–æ: {auto}\n"
                                     f"üìô –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}\n"
                                     f"üèù –†–∞–π–æ–Ω: {place}\n"
                                     f"üîπ –†–∞–∑–º–µ—Ä —Ç—Ä–µ—â–∏–Ω—ã: {dime_tre}—Å–º\n"
                                     f"üîπ –°—Ä–æ–∫: {srok_tre}")
                await update_db("orders", "id", "delete_id", id, delete_id)
                delete_id += 1
            counter += 1
        if delete_id == 1:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        else:
            await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ'", reply_markup=MyOrdersMenu)
            await StateMachine.AcceptMyOrders.set()

    if message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìñ":
        await message.answer("üí•–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
