from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove

# config
from data.config import code

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# start_command
from handlers.CommandStart import start_command

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import MainAdminMenu, AdminMenu, BackMenu, EditContactsMenu, StopMenu


@dp.message_handler(state=StateMachine.EditFaceCommands)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    if message.text == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µü§ö":
        hello_text = str(await select_db("options", "code", "hello_text", code))
        await message.answer(f"ü§ö–¢–µ–∫—É—â–µ–µ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n"
                             f"{hello_text}")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:", reply_markup=BackMenu)
        await StateMachine.EditHelloText.set()

    if message.text == "–†–∞–±–æ—á–µ–µ –í—Ä–µ–º—è‚åöÔ∏è":
        work_time_text = str(await select_db("options", "code", "work_time_text", code))
        await message.answer(f"‚åöÔ∏è–¢–µ–∫—É—â–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í—Ä–µ–º–µ–Ω–∏ –†–∞–±–æ—Ç—ã:\n"
                             f"{work_time_text}")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –í—Ä–µ–º–µ–Ω–∏ –†–∞–±–æ—Ç—ã:", reply_markup=BackMenu)
        await StateMachine.EditWorkTimeText.set()

    if message.text == "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ‚òëÔ∏è":
        end_text = str(await select_db("options", "code", "end_text", code))
        await message.answer(f"‚òëÔ∏è–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
                             f"{end_text}")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è:", reply_markup=BackMenu)
        await StateMachine.EditEndText.set()

    if message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ãüìö":
        await message.answer("üìö–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤:", reply_markup=EditContactsMenu)
        contact_num = 1
        contacts_count = int(await select_db("counters", "code", "contacts_count", code))
        del_contact_num = 1
        while contact_num <= contacts_count:
            try:
                type = str(await select_db("contactsoptions", "contact_num", "type", contact_num))
            except:
                contact_num += 1
                continue

            await message.answer(f"{del_contact_num}. {type}")

            # del update
            await update_db("contactsoptions", "contact_num", "del_contact_num", contact_num, del_contact_num)
            del_contact_num += 1

            contact_num += 1

        await StateMachine.EditContactsCommands.set()


@dp.message_handler(state=StateMachine.EditContactsCommands)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Çüìö":
        await message.answer("üîñ–ü—Ä–∏–º–µ—Ä: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞‚òéÔ∏è\n"
                             "–í–≤–µ–¥–∏—Ç–µ –ö–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=BackMenu)
        await StateMachine.AddContacts.set()

    if message.text == "–£–¥–∞–ª–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç‚ùå":
        await message.answer("‚ö°Ô∏è–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç\n"
                             "–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä –ö–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=StopMenu)
        await StateMachine.DeleteContacts.set()


@dp.message_handler(state=StateMachine.AddContacts)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        type = message.text
        try:
            await insert_db("contactsoptions", "type", type)
        except:
            pass

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contacts_count = int(await select_db("counters", "code", "contacts_count", code)) + 1
        await update_db("counters", "code", "contacts_count", code, contacts_count)

        if user_name == main_admin_name:
            await message.answer(f"üìö–ö–æ–Ω—Ç–∞–∫—Ç {type} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=MainAdminMenu)
            await StateMachine.MainAdmin.set()
        else:
            await message.answer(f"üìö–ö–æ–Ω—Ç–∞–∫—Ç {type} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=AdminMenu)
            await StateMachine.Admin.set()


@dp.message_handler(state=StateMachine.DeleteContacts)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        check_num = True
        del_contact_num = message.text
        try:
            del_contact_num = int(del_contact_num)
        except:
            check_num = False

        if check_num:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            check_table = True
            try:
                type = str(await select_db("contactsoptions", "del_contact_num", "type", del_contact_num))
            except:
                check_table = False

            if check_table:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ö–æ–Ω—Ç–∞–∫—Ç–∞
                await delete_db("contactsoptions", "del_contact_num", del_contact_num)

                # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤
                contacts_count = int(await select_db("counters", "code", "contacts_count", code)) - 1
                await update_db("counters", "code", "contacts_count", code, contacts_count)

                if user_name == main_admin_name:
                    await message.answer(f"‚ùå–ö–æ–Ω—Ç–∞–∫—Ç {type} —É–¥–∞–ª–µ–Ω", reply_markup=MainAdminMenu)
                    await StateMachine.MainAdmin.set()
                else:
                    await message.answer(f"‚ùå–ö–æ–Ω—Ç–∞–∫—Ç {type} —É–¥–∞–ª–µ–Ω", reply_markup=AdminMenu)
                    await StateMachine.Admin.set()
            # check table
            else:
                await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        # check_num
        else:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


@dp.message_handler(state=StateMachine.EditHelloText)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        hello_text = message.text
        await update_db("options", "code", "hello_text", code, hello_text)

        if user_name == main_admin_name:
            await message.answer(f"ü§ö–¢–µ–∫—Å—Ç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{hello_text}", reply_markup=MainAdminMenu)
            await StateMachine.MainAdmin.set()
        else:
            await message.answer(f"ü§ö–¢–µ–∫—Å—Ç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{hello_text}", reply_markup=AdminMenu)
            await StateMachine.Admin.set()


@dp.message_handler(state=StateMachine.EditWorkTimeText)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –í—Ä–µ–º–µ–Ω–∏ –†–∞–±–æ—Ç—ã
        work_time_text = message.text
        await update_db("options", "code", "work_time_text", code, work_time_text)

        if user_name == main_admin_name:
            await message.answer(f"‚åöÔ∏è–¢–µ–∫—Å—Ç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í—Ä–µ–º–µ–Ω–∏ –†–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{work_time_text}", reply_markup=MainAdminMenu)
            await StateMachine.MainAdmin.set()
        else:
            await message.answer(f"‚åöÔ∏è–¢–µ–∫—Å—Ç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í—Ä–µ–º–µ–Ω–∏ –†–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{work_time_text}", reply_markup=AdminMenu)
            await StateMachine.Admin.set()


@dp.message_handler(state=StateMachine.EditEndText)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)
    main_admin_name = str(await select_db("mainadmin", "code", "main_admin_name", code))

    # start
    if message.text == "/start":
        await start_command("start", user_name, user_id, dp)
    # *****

    # back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command("back", user_name, user_id, dp)
    # *****

    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è
        end_text = message.text
        await update_db("options", "code", "end_text", code, end_text)

        if user_name == main_admin_name:
            await message.answer(f"‚òëÔ∏è–¢–µ–∫—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{end_text}", reply_markup=MainAdminMenu)
            await StateMachine.MainAdmin.set()
        else:
            await message.answer(f"‚òëÔ∏è–¢–µ–∫—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω:\n"
                                 f"{end_text}", reply_markup=AdminMenu)
            await StateMachine.Admin.set()
