from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove

# config
from data.config import code

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# start_command
from handlers.CommandStart import start_command

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import UserMenu, BackMenu


@dp.message_handler(state=StateMachine.User)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start
    if message.text == "/start" or message.text == "–ù–∞–∑–∞–¥‚óÄÔ∏è":
        await start_command(user_name, user_id, dp)
    # *****

    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Çüìò":
        await message.answer("‚ö°Ô∏è–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç\n"
                             "–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä –ö–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=BackMenu)
        await StateMachine.DelNumContactWait.set()


@dp.message_handler(state=StateMachine.DelNumContactWait)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start" or message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        check_num = True
        del_user_contact_id_num = message.text
        try:
            del_user_contact_id_num = int(del_user_contact_id_num)
        except:
            check_num = False

        if check_num:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            del_user_contact_id = str(del_user_contact_id_num) + '#' + user_id

            check_table = True
            try:
                info = str(await select_db("userscontacts", "del_user_contact_id", "info", del_user_contact_id))
            except:
                check_table = False

            if check_table:
                # –ó–∞–ø–∏—à–µ–º id –ö–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω—è–µ–º
                user_contact_id = str(await select_db("userscontacts", "del_user_contact_id", "user_contact_id", del_user_contact_id))
                await update_db("users", "user_id", "user_contact_id", user_id, user_contact_id)

                await message.answer(f"üîñ–í—ã–±—Ä–∞–Ω–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç: {info}\n"
                                     f"üìò–í–≤–µ–¥–∏—Ç–µ –ù–æ–≤—É—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
                await StateMachine.NewContactWait.set()
            # check table
            else:
                await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        # check_num
        else:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


@dp.message_handler(state=StateMachine.NewContactWait)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start" or message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ö–æ–Ω—Ç–∞–∫—Ç–∞
        info = message.text
        user_contact_id = str(await select_db("users", "user_id", "user_contact_id", user_id))
        await update_db("userscontacts", "user_contact_id", "info", user_contact_id, info)

        await message.answer("üìò–ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=UserMenu)

        await StateMachine.User.set()
