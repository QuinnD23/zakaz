from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove

# config
from data.config import code

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# start_command
from handlers.CommandStart import start_command

# send_commands
from handlers.UserFunction.CommandSendOrder import send_order

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import UserMenu


@dp.message_handler(state=StateMachine.ServiceInOrder)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        check_num = True
        del_service_num = message.text
        try:
            del_service_num = int(del_service_num)
        except:
            check_num = False

        if check_num:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            check_table = True
            try:
                type = str(await select_db("servicesoptions", "del_service_num", "type", del_service_num))
            except:
                check_table = False

            if check_table:
                # –ó–∞–ø–∏—Å—å –£—Å–ª—É–≥–∏ –≤ Orders
                orders_count = str(await select_db("users", "user_id", "orders_count", user_id))
                order_id = orders_count + '#' + user_id
                await update_db("orders", "order_id", "service", order_id, type)

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
                work_time_text = str(await select_db("options", "code", "work_time_text", code))
                await message.answer(f"{work_time_text}")

                await message.answer("üîñ–ü—Ä–∏–º–µ—Ä: 17.11.2021\n"
                                     "üóì–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –î–∞—Ç—É:")

                await StateMachine.DateInOrder.set()
            # check table
            else:
                await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        # check_num
        else:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


@dp.message_handler(state=StateMachine.DateInOrder)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –ó–∞–ø–∏—Å—å –î–∞—Ç—ã –≤ Orders
        date = message.text

        orders_count = str(await select_db("users", "user_id", "orders_count", user_id))
        order_id = orders_count + '#' + user_id

        await update_db("orders", "order_id", "date", order_id, date)

        await message.answer("üîñ–ü—Ä–∏–º–µ—Ä: 15:00\n"
                             "üïê–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –í—Ä–µ–º—è:")

        await StateMachine.TimeInOrder.set()


@dp.message_handler(state=StateMachine.TimeInOrder)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –ó–∞–ø–∏—Å—å –í—Ä–µ–º–µ–Ω–∏ –≤ Orders
        time = message.text

        orders_count = str(await select_db("users", "user_id", "orders_count", user_id))
        order_id = orders_count + '#' + user_id

        await update_db("orders", "order_id", "time", order_id, time)

        await message.answer("üë©‚Äçüíº–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ú–∞—Å—Ç–µ—Ä–∞:")

        # –°–ø–∏—Å–æ–∫ –ú–∞—Å—Ç–µ—Ä–æ–≤
        worker_num = 1
        workers_count = int(await select_db("counters", "code", "workers_count", code))
        del_worker_num = 1
        while worker_num <= workers_count:
            try:
                worker_name = str(await select_db("workers", "worker_num", "worker_name", worker_num))
            except:
                worker_num += 1
                continue

            # –í—ã–≤–æ–¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await message.answer(f"{del_worker_num}. {worker_name}")

            # del update
            await update_db("workers", "worker_num", "del_worker_num", worker_num, del_worker_num)
            del_worker_num += 1

            worker_num += 1

        await message.answer(f"{del_worker_num}. –ú–∞—Å—Ç–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω")
        # –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞ "–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω"
        await update_db("orders", "order_id", "del_no_worker", order_id, del_worker_num)

        await message.answer("‚ö°Ô∏è–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ú–∞—Å—Ç–µ—Ä–∞\n"
                             "–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä –ú–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")

        await StateMachine.WorkerInOrder.set()


@dp.message_handler(state=StateMachine.WorkerInOrder)
async def mess(message: Message):
    user_name = str(message.from_user.username)
    user_id = str(message.from_user.id)

    # start and back
    if message.text == "/start":
        await start_command(user_name, user_id, dp)
    # *****

    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        check_num = True
        del_worker_num = message.text
        try:
            del_worker_num = int(del_worker_num)
        except:
            check_num = False

        if check_num:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            check_table = True
            try:
                worker_name = str(await select_db("workers", "del_worker_num", "worker_name", del_worker_num))
            except:
                check_table = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω"
            orders_count = str(await select_db("users", "user_id", "orders_count", user_id))
            order_id = orders_count + '#' + user_id
            del_no_worker = str(await select_db("orders", "order_id", "del_no_worker", order_id))
            if del_worker_num == del_no_worker:
                check_table = True
                worker_name = "–ú–∞—Å—Ç–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω"

            if check_table:
                # –ó–∞–ø–∏—Å—å –ú–∞—Å—Ç–µ—Ä–∞ –≤ Orders
                orders_count = str(await select_db("users", "user_id", "orders_count", user_id))
                order_id = orders_count + '#' + user_id
                await update_db("orders", "order_id", "worker", order_id, worker_name)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ó–∞–∫–∞–∑–∞ –≤ –ì—Ä—É–ø–ø—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await send_order(user_id, dp)

                # –£–¥–∞–ª–µ–Ω–∏–µ Order


                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                end_text = str(await select_db("options", "code", "end_text", code))
                await message.answer(f"{end_text}", reply_markup=UserMenu)

                await StateMachine.User.set()
            # check table
            else:
                await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        # check_num
        else:
            await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
