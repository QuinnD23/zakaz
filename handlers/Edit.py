from loader import dp

from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.dispatcher.filters import Command

# config
from data.config import code

# re
import re

# db_commands
from handlers.db_commands import insert_db, update_db, select_db, delete_db

# state_machine
from states.statates import StateMachine

# marks
from kyeboards.marks import AdminMenu, EditMenu


@dp.message_handler(state=StateMachine.EditChoice)
async def mess(message: Message):
    # ----- start
    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----
    else:
        # ----- back
        if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...", reply_markup=AdminMenu)
            await StateMachine.Admin.set()
        # -----
        else:
            check = True
            try:
                delete_id = int(message.text)
            except:
                check = False

            if check:
                check = True
                try:
                    text = str(await select_db("notifies", "delete_id", "text", delete_id))
                except:
                    check = False
                if check:
                    year = str(await select_db("notifies", "delete_id", "year", delete_id))
                    month = str(await select_db("notifies", "delete_id", "month", delete_id))
                    day = str(await select_db("notifies", "delete_id", "day", delete_id))
                    hour = str(await select_db("notifies", "delete_id", "hour", delete_id))
                    min = str(await select_db("notifies", "delete_id", "min", delete_id))

                    await update_db("admin", "code", "edit_notify", code, delete_id)

                    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
                                         f"{delete_id}üí•{text}\n"
                                         f"–î–∞—Ç–∞ - {day}.{month}.{year}\n"
                                         f"–í—Ä–µ–º—è - {hour}:{min}", reply_markup=EditMenu)
                    await message.answer("–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å?")
                    await StateMachine.EditMain.set()
                else:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚úñÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚úñÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message_handler(state=StateMachine.EditMain)
async def mess(message: Message):
    # ----- start
    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----

    # ----- back
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚óÄÔ∏è":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----

    if message.text == "–¢–µ–∫—Å—Ç‚úèÔ∏è":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¢–µ–∫—Å—Ç‚úèÔ∏è", reply_markup=ReplyKeyboardRemove())
        await StateMachine.Text.set()

    if message.text == "–î–∞—Ç–∞üóì":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –î–∞—Ç—Éüóì\n"
                             "–ü—Ä–∏–º–µ—Ä - 15 10 2021", reply_markup=ReplyKeyboardRemove())
        await StateMachine.Date.set()

    if message.text == "–í—Ä–µ–º—èüïê":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –í—Ä–µ–º—èüïê\n"
                             "–ü—Ä–∏–º–µ—Ä - 12 30", reply_markup=ReplyKeyboardRemove())
        await StateMachine.Time.set()


@dp.message_handler(state=StateMachine.Text)
async def mess(message: Message):
    # ----- start
    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----
    else:
        delete_id = int(await select_db("admin", "code", "edit_notify", code))
        await update_db("notifies", "delete_id", "text", delete_id, message.text)

        text = str(await select_db("notifies", "delete_id", "text", delete_id))
        year = str(await select_db("notifies", "delete_id", "year", delete_id))
        month = str(await select_db("notifies", "delete_id", "month", delete_id))
        day = str(await select_db("notifies", "delete_id", "day", delete_id))
        hour = str(await select_db("notifies", "delete_id", "hour", delete_id))
        min = str(await select_db("notifies", "delete_id", "min", delete_id))

        await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ò–∑–º–µ–Ω–µ–Ω–æ:\n"
                             f"{delete_id}üí•{text}\n"
                             f"–î–∞—Ç–∞ - {day}.{month}.{year}\n"
                             f"–í—Ä–µ–º—è - {hour}:{min}", reply_markup=EditMenu)
        await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?")
        await StateMachine.EditMain.set()


@dp.message_handler(state=StateMachine.Date)
async def mess(message: Message):
    # ----- start
    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----
    else:
        check = True
        date = message.text
        try:
            date1 = int(re.sub(" ", "", date))
        except:
            check = False

        if check:
            delete_id = int(await select_db("admin", "code", "edit_notify", code))
            day = str(date.split()[0])
            await update_db("notifies", "delete_id", "day", delete_id, day)
            month = str(date.split()[1])
            await update_db("notifies", "delete_id", "month", delete_id, month)
            year = str(date.split()[2])
            await update_db("notifies", "delete_id", "year", delete_id, year)

            text = str(await select_db("notifies", "delete_id", "text", delete_id))
            year = str(await select_db("notifies", "delete_id", "year", delete_id))
            month = str(await select_db("notifies", "delete_id", "month", delete_id))
            day = str(await select_db("notifies", "delete_id", "day", delete_id))
            hour = str(await select_db("notifies", "delete_id", "hour", delete_id))
            min = str(await select_db("notifies", "delete_id", "min", delete_id))

            await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ò–∑–º–µ–Ω–µ–Ω–æ:\n"
                                 f"{delete_id}üí•{text}\n"
                                 f"–î–∞—Ç–∞ - {day}.{month}.{year}\n"
                                 f"–í—Ä–µ–º—è - {hour}:{min}", reply_markup=EditMenu)
            await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?")
            await StateMachine.EditMain.set()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚úñÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message_handler(state=StateMachine.Time)
async def mess(message: Message):
    # ----- start
    if message.text == "/start":
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=AdminMenu)
        await StateMachine.Admin.set()
    # -----
    else:
        check = True
        date = message.text
        try:
            date1 = int(re.sub(" ", "", date))
        except:
            check = False

        if check:
            delete_id = int(await select_db("admin", "code", "edit_notify", code))
            hour = str(date.split()[0])
            await update_db("notifies", "delete_id", "hour", delete_id, hour)
            min = str(date.split()[1])
            await update_db("notifies", "delete_id", "min", delete_id, min)

            text = str(await select_db("notifies", "delete_id", "text", delete_id))
            year = str(await select_db("notifies", "delete_id", "year", delete_id))
            month = str(await select_db("notifies", "delete_id", "month", delete_id))
            day = str(await select_db("notifies", "delete_id", "day", delete_id))
            hour = str(await select_db("notifies", "delete_id", "hour", delete_id))
            min = str(await select_db("notifies", "delete_id", "min", delete_id))

            await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ò–∑–º–µ–Ω–µ–Ω–æ:\n"
                                 f"{delete_id}üí•{text}\n"
                                 f"–î–∞—Ç–∞ - {day}.{month}.{year}\n"
                                 f"–í—Ä–µ–º—è - {hour}:{min}", reply_markup=EditMenu)
            await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?")
            await StateMachine.EditMain.set()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚úñÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
